@mixin centerBlock() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin filterGrey() {
  filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'/></filter></svg>#grayscale");
  filter: grayscale(100%);
  filter: gray;
}

@mixin hiddenSeoFriendly() {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  border: 0;
}

@mixin imgResponsive($display: block) {
  display: $display;
  max-width: 100%;
  height: auto;
}

@mixin resetPosAbs() {
  position: relative;
  top: auto;
  right: auto;
  bottom: auto;
  left: auto;
}

@mixin respondTo($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin transition($property: all, $duration: 0.3s, $timing_function: ease) {
  transition: $property $duration $timing_function;
}

@mixin text($fontColor: #000, $fontSize: 1em, $fontWeight: normal, $lineHeight: 1.5) {
  color: $fontColor;
  font-size: $fontSize;
  font-weight: $fontWeight;
  line-height: $lineHeight;
}

// Requires inline-block or block for proper styling
@mixin textOverflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
